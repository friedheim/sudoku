/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.friedheim.sudoku.solver;

import org.junit.Test;

/**
 *
 * @author friedheim
 */
public class SudokuFieldTest {
//    @Test
//    public void testInitialize()
//    {
//        byte[][] sudoku4 = new byte[][]{
//            {0,0,0,1},
//            {0,0,2,0},
//            {0,4,0,0},
//            {3,0,4,0}
//        };
//        SudokuField sf = new SudokuField((byte)4,sudoku4);
//        sf.solve();
//    }
    
    @Test
    public void testSudoku9_1()
    {
        //Sudoku aus Heft 6.3
        byte[][] sudoku9_1 = new byte[][]
        {
            {0,0,0,0,0,0,4,0,7},
            {7,0,0,9,6,4,0,1,0},
            {4,0,1,0,8,0,6,0,0},
            {0,0,9,6,2,0,7,3,1},
            {0,6,0,0,0,0,0,2,0},
            {5,7,2,0,1,3,9,0,0},
            {0,0,7,0,3,0,1,0,4},
            {0,9,0,4,7,1,0,0,3},
            {3,0,4,0,0,0,0,0,0}
        };        
        
        byte[][] expected = new byte[][]
        {
            {9,3,6,1,5,2,4,8,7},
            {7,8,5,9,6,4,3,1,2},
            {4,2,1,3,8,7,6,5,9},
            {8,4,9,6,2,5,7,3,1},
            {1,6,3,7,4,9,8,2,5},
            {5,7,2,8,1,3,9,4,6},
            {6,5,7,2,3,8,1,9,4},
            {2,9,8,4,7,1,5,6,3},
            {3,1,4,5,9,6,2,7,8}
        };
        SudokuField sf = new SudokuField((byte)9,sudoku9_1);
        byte[][] solution = sf.solve();
        Assertx.assertMatrixEquals( expected, solution);
    }
    
    @Test
    public void testSudoku4_1()
    {
        byte[][] sudoku4_1 = new byte[][]
        {
            {0,0,0,1},
            {0,0,2,0},
            {0,4,0,0},
            {3,0,4,0}
        };        
        
        byte[][] expected = new byte[][]
        {
            {4,2,3,1},
            {1,3,2,4},
            {2,4,1,3},
            {3,1,4,2}
        };
        SudokuField sf = new SudokuField((byte)4,sudoku4_1);
        byte[][] solution = sf.solve();
        Assertx.assertMatrixEquals( expected, solution);
    }
    
    @Test
    public void testSudoku16_1()
    {
        byte[][] sudoku16_1 = new byte[][]
        {
            {11,0,0,0,0,16,4,0,14,0,0,0,0,0,6,13},
            {0,0,0,3,0,1,9,0,0,10,0,0,0,5,0,0},
            {0,0,0,15,7,5,0,0,0,0,0,13,3,2,14,12},
            {6,1,9,13,14,2,0,0,0,7,0,11,15,4,16,0},
            {8,0,7,0,0,0,0,0,12,0,0,0,0,6,13,0},
            {0,12,14,0,0,6,0,9,0,15,0,4,0,0,0,8},
            {0,0,16,0,0,0,5,8,0,0,0,0,0,14,0,3},
            {13,6,1,9,0,0,0,3,0,0,5,0,0,0,0,0},
            {0,0,0,7,0,15,0,16,0,2,12,0,6,13,0,1},
            {9,0,6,0,0,0,0,2,11,8,7,0,16,0,15,0},
            {0,0,10,0,8,0,0,0,0,9,6,0,0,12,0,0},
            {0,0,12,14,0,0,0,1,0,4,0,16,7,0,0,5},
            {0,5,8,0,16,4,0,0,2,14,0,0,0,0,0,0},
            {0,0,0,12,0,9,13,6,0,0,15,0,11,0,5,0},
            {16,4,0,0,5,8,0,7,0,0,13,6,12,3,0,0},
            {0,0,0,0,0,0,12,0,8,0,11,0,10,15,0,0}
        };        
        
        byte[][] expected = new byte[][]
        {
            {11,7,5,8,10,16,4,15,14,12,2,3,9,1,6,13},  
            {12,14,2,3,6,1,9,13,16,10,4,15,8,5,7,11},
            {10,16,4,15,7,5,8,11,1,6,9,13,3,2,14,12},
            {6,1,9,13,14,2,3,12,5,7,8,11,15,4,16,10},
            {8,11,7,5,15,10,16,4,12,3,14,2,1,6,13,9},
            {3,12,14,2,13,6,1,9,10,15,16,4,5,7,11,8},
            {15,10,16,4,11,7,5,8,6,13,1,9,2,14,12,3},
            {13,6,1,9,12,14,2,3,7,11,5,8,4,16,10,15},
            {5,8,11,7,4,15,10,16,3,2,12,14,6,13,9,1},
            {9,13,6,1,3,12,14,2,11,8,7,5,16,10,15,4},
            {4,15,10,16,8,11,7,5,13,9,6,1,14,12,3,2},
            {2,3,12,14,9,13,6,1,15,4,10,16,7,11,8,5},
            {7,5,8,11,16,4,15,10,2,14,3,12,13,9,1,6},
            {14,2,3,12,1,9,13,6,4,16,15,10,11,8,5,7},
            {16,4,15,10,5,8,11,7,9,1,13,6,12,3,2,14},
            {1,9,13,6,2,3,12,14,8,5,11,7,10,15,4,16}
        };
        SudokuField sf = new SudokuField((byte)16,sudoku16_1);
        byte[][] solution = sf.solve();
        Assertx.assertMatrixEquals( expected, solution);
    }
    
}
